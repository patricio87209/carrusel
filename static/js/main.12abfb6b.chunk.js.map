{"version":3,"sources":["logo.svg","components/Box.jsx","components/Circle.jsx","components/Carrusel.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Box","props","className","Circle","Component","Carrusel","useState","componentRendered","setComponentRendered","colorStyle","children","length","color","onClick","console","log","style","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sKAAAA,EAAOC,QAAU,IAA0B,kC,yFCW5BC,MARf,SAAaC,GACX,OACE,yBAAKC,UAAU,gBACb,uC,4BCQSC,E,uKARX,OACE,yBAAKD,UAAU,mBACb,6C,GALaE,a,OCkCNC,MAhCf,SAAkBJ,GAAO,IAAD,EAE0BK,mBAAS,GAFnC,mBAEjBC,EAFiB,KAEEC,EAFF,KAiBhBC,GAdKR,EAAMS,SAASC,OAcP,CAACC,MAAOX,EAAMW,QACnC,OACI,yBAAKV,UAAU,OACf,wCACKD,EAAMS,SAASH,GAChB,4BAAQM,QAhBS,YAEfN,EAAmB,GAAKN,EAAMS,SAASC,OAAU,EAAIH,EAAqBP,EAAMS,SAASC,OAAS,GAAKH,GAAsBD,EAAmB,GAAKN,EAAMS,SAASC,QACtKG,QAAQC,IAAIR,IAamBS,MAASP,GAAxC,YAGA,4BAAQI,QAbK,WACbL,GAAsBD,EAAmB,GAAKN,EAAMS,SAASC,QAC7DG,QAAQC,IAAIR,IAWeS,MAASP,GAApC,eCVOQ,MAbf,WACE,OACE,kBAAC,EAAD,CAAUL,MAAM,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUA,MAAM,QACd,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.12abfb6b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport '../../src/App.css'\n\nfunction Box(props){\n  return (\n    <div className='Box Centrado'>\n      <h1> Box </h1>\n    </div>\n  );\n}\n\nexport default Box;","import React, { Component } from 'react';\nimport '../../src/App.css'\n\nclass Circle extends Component {\n\n  render() {\n    return (\n      <div className='Circle Centrado'>\n        <h1> Circle </h1>\n        </div>\n    );\n  }\n}\n\nexport default Circle;","import React, { Component, useState, useEffect} from 'react';\nimport '../../src/App.css'\n\n\n\nfunction Carrusel(props){\n  \n  let [componentRendered, setComponentRendered] = useState(0);\n  let size = props.children.length\n\n\n    const previousItem = () => {\n        \n        ((componentRendered -1) % props.children.length) < 0 ? setComponentRendered(props.children.length - 1) : setComponentRendered((componentRendered -1) % props.children.length);  \n        console.log(componentRendered)\n    }\n\n    const nextItem = () => {\n        setComponentRendered((componentRendered +1) % props.children.length)\n        console.log(componentRendered)\n    }\n\n    let colorStyle = {color: props.color}\nreturn (\n    <div className='App'>\n    <h1>Carrusel</h1>\n        {props.children[componentRendered]}\n        <button onClick={previousItem} style = {colorStyle}>\n            Anterios\n        </button>\n        <button onClick={nextItem} style = {colorStyle}>\n            Siguiente\n        </button>\n    </div>\n  );\n}\n\nexport default Carrusel;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Box from './components/Box';\nimport Circle from './components/Circle';\nimport Carrusel from './components/Carrusel'\n\nfunction App() {\n  return (\n    <Carrusel color='red'>\n      <Box/>\n      <Circle/>\n      <Carrusel color='blue'>\n        <Box/>\n        <Circle/>\n      </Carrusel>\n    </Carrusel>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}