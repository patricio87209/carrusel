{"version":3,"sources":["logo.svg","components/Box.jsx","components/Circle.jsx","components/Carrusel.jsx","components/Form.jsx","components/Alertador.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Box","className","Circle","Component","Carrusel","children","name","color","useState","index","setIndex","size","length","colorStyle","onClick","style","Form","undefined","nombre","setNombre","onSubmit","alert","type","value","onChange","event","target","console","log","Alertador","bool","setBool","useEffect","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sKAAAA,EAAOC,QAAU,IAA0B,kC,yFCW5BC,MARf,WACE,OACE,yBAAKC,UAAU,gBACb,uC,4BCQSC,E,uKARX,OACE,yBAAKD,UAAU,mBACb,6C,GALaE,a,OCiCNC,MA/Bf,YAA2C,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,MAAO,EAEdC,mBAAS,GAFK,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAGlCC,EAAON,EAASO,OAYhBC,EAAa,CAACN,SAEtB,OACI,yBAAKN,UAAU,mBACf,4BAAMK,GAAa,YACbD,EAASI,GACX,4BAAQK,QAfS,WAESJ,GAAxBD,EAAO,GAAKE,EAAQ,EAAaA,EAAO,GAAeF,EAAO,GAAKE,IAatCI,MAASF,GAAxC,YAGA,4BAAQC,QAbK,WACbJ,GAAUD,EAAO,GAAKE,IAYKI,MAASF,GAApC,eCGOG,MA5Bf,WAAiB,IAAD,EAEcR,wBAASS,GAFvB,mBAEPC,EAFO,KAECC,EAFD,KAcZ,OAEI,yBAAKlB,UAAU,YACX,0BAAMmB,SAbO,WACjBC,MAAMH,KAaE,uCAEI,2BAAOI,KAAK,OAAOC,MAAOL,EAAQM,SAX7B,SAACC,GACpBN,EAAUM,EAAMC,OAAOH,OACvBI,QAAQC,IAAIH,EAAMC,OAAOH,WAWX,2BAAOD,KAAK,SAASC,MAAM,cCOhCM,MA9Bf,WAAqB,IAAD,EAEMrB,oBAAS,GAFf,mBAEXsB,EAFW,KAELC,EAFK,KAuBlB,OAnBAC,qBAAU,WAGR,OAFAX,MAAM,+BAEC,WACLA,MAAM,qCAGV,IAEFW,qBAAU,WACRX,MAAM,qCAEN,CAACS,IAQC,yBAAK7B,UAAU,eAAea,QANZ,WAClBiB,GAASD,GACTH,QAAQC,IAAIE,KAKV,2CCJSG,MAff,WACE,OACE,kBAAC,EAAD,CAAU3B,KAAK,WAAWC,MAAM,OAC9B,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUD,KAAK,gBAAgBC,MAAM,QACnC,kBAAC,EAAD,MACA,kBAAC,EAAD,SCNY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.529d1fee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport '../../src/App.css'\n\nfunction Box(){\n  return (\n    <div className='Box Centrado'>\n      <h1> Box </h1>\n    </div>\n  );\n}\n\nexport default Box;","import React, { Component } from 'react';\nimport '../../src/App.css'\n\nclass Circle extends Component {\n\n  render() {\n    return (\n      <div className='Circle Centrado'>\n        <h1> Circle </h1>\n      </div>\n    );\n  }\n}\n\nexport default Circle;","import React, { Component, useState} from 'react';\nimport '../../src/App.css'\n\n\n\nfunction Carrusel({children, name, color}){\n  \n  const [index, setIndex] = useState(0);\n  const size = children.length\n\n\n    const previousItem = () => {\n        \n        ((index -1) % size) < 0 ? setIndex(size - 1) : setIndex((index -1) % size);  \n    }\n\n    const nextItem = () => {\n        setIndex((index +1) % size)\n    }\n\n    let colorStyle = {color}\n    \nreturn (\n    <div className='Centrado Border'>\n    <h1>{ name? name : \"Carrusel\"}</h1>\n        { children[index]}\n        <button onClick={previousItem} style = {colorStyle}>\n            Anterior\n        </button>\n        <button onClick={nextItem} style = {colorStyle}>\n            Siguiente\n        </button>\n    </div>\n  );\n}\n\nexport default Carrusel;","import React, { Component , useState} from 'react';\nimport '../../src/App.css'\n\n\nfunction Form (){\n\n    let [nombre, setNombre] = useState(undefined);\n\n    const handleSubmit = () => {\n        alert(nombre);\n    } \n\n\n    const handleChange = (event) => {\n      setNombre(event.target.value);\n      console.log(event.target.value)\n    }\n\n    return(\n\n        <div className='Centrado'>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Name:\n                    <input type=\"text\" value={nombre} onChange={handleChange} />\n                </label>\n                    <input type=\"submit\" value=\"Submit\" />\n            </form>\n        </div>\n    )\n}\n\nexport default Form;","import React, { Component, useEffect, useState } from 'react';\nimport '../../src/App.css'\n\nfunction Alertador(){\n\n  const [bool, setBool] = useState(false);\n\n  useEffect(() => {\n    alert(\"Alerta: componente montado.\");\n\n    return function desmontado() {\n      alert(\"Alerta: componente desmontado.\");\n    };\n\n},[]);\n\nuseEffect(() => {\n  alert(\"Alerta: componente actualizado.\");\n\n},[bool]);\n\n  const handleClick = () => {\n    setBool(!bool)\n    console.log(bool)\n  }\n\n  return (\n    <div className='Box Centrado' onClick={handleClick}>\n      <h1> ALERTA! </h1>\n    </div>\n  );\n}\n\nexport default Alertador;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Box from './components/Box';\nimport Circle from './components/Circle';\nimport Carrusel from './components/Carrusel'\nimport Form from './components/Form';\nimport Alertador from './components/Alertador'\n\nfunction App() {\n  return (\n    <Carrusel name='Carrusel' color='red'>\n      <Form/>\n      <Box/>\n      <Circle/>\n      <Alertador/>\n      <Carrusel name='Carrusel hijo' color='blue'>\n        <Box/>\n        <Circle/>\n      </Carrusel>\n    </Carrusel>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}